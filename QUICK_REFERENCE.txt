================================================================================
                    FILE INTEGRITY CHECKER - QUICK REFERENCE
================================================================================

PROJECT FILES:
--------------
Core Application:
  - hash_generator.py      Backend logic (hash functions)
  - app_gui.py            GUI application (Tkinter)

Documentation:
  - README.md             Complete overview & installation
  - PROJECT_REPORT.md     Academic/technical report
  - USAGE_GUIDE.md        Step-by-step user guide
  - PROJECT_SUMMARY.md    Quick overview of project
  - QUICK_REFERENCE.txt   This file - quick commands

Utilities:
  - test_installation.py  Verify installation
  - run.bat              Windows launcher
  - requirements.txt     Dependencies list
  - LICENSE              MIT License

================================================================================
QUICK START COMMANDS:
---------------------

1. Test Installation:
   > python test_installation.py

2. Run Application:
   > python app_gui.py
   OR (Windows): Double-click run.bat

3. Check Python Version:
   > python --version

4. Test Tkinter:
   > python -m tkinter

================================================================================
HOW TO USE THE APP:
-------------------

Step 1: Launch
  - Run: python app_gui.py
  - Window opens with title "File Integrity Checker"

Step 2: Select File
  - Click "Browse File" button
  - Choose any file
  - Original hash generates automatically

Step 3: Verify Integrity
  - Modify the file (optional)
  - Click "Recheck File" button
  - See result:
    * GREEN = File is safe (unchanged)
    * RED = File modified (changed)

Step 4: Clear & Restart
  - Click "Clear" button
  - Select new file
  - Repeat process

================================================================================
KEY FEATURES:
-------------
[x] SHA256 cryptographic hashing
[x] Real-time file integrity verification
[x] User-friendly GUI interface
[x] File information display (name, size, path)
[x] Color-coded status indicators
[x] Large file support (chunked reading)
[x] Cross-platform (Windows/Linux/macOS)
[x] No external dependencies
[x] Error handling & validation
[x] Professional documentation

================================================================================
TECHNICAL SPECS:
----------------
Language:        Python 3.6+
GUI Framework:   Tkinter
Hash Algorithm:  SHA256 (256-bit)
Hash Length:     64 hexadecimal characters
File Reading:    4096-byte chunks
Dependencies:    None (standard library only)
Platforms:       Windows, Linux, macOS
License:         MIT (free to use)

================================================================================
COMMON COMMANDS:
----------------

Run Application:
  python app_gui.py

Test Installation:
  python test_installation.py

Create Executable (Optional):
  pip install pyinstaller
  pyinstaller --onefile --windowed app_gui.py

Check Python:
  python --version

Install Tkinter (if missing):
  Ubuntu/Debian: sudo apt-get install python3-tk
  Fedora: sudo dnf install python3-tkinter
  Windows/macOS: Included with Python

================================================================================
FILE STRUCTURE:
---------------

file-integrity-checker/
├── hash_generator.py       # Backend (SHA256 logic)
├── app_gui.py             # Frontend (Tkinter GUI)
├── README.md              # Project overview
├── PROJECT_REPORT.md      # Full technical report
├── USAGE_GUIDE.md         # User manual
├── PROJECT_SUMMARY.md     # Quick overview
├── QUICK_REFERENCE.txt    # This file
├── test_installation.py   # Installation test
├── run.bat               # Windows launcher
├── requirements.txt      # Dependencies
└── LICENSE               # MIT License

================================================================================
TROUBLESHOOTING:
----------------

Problem: App doesn't start
Solution: Check Python 3.6+ installed, verify Tkinter available

Problem: "File not found" error
Solution: Verify file exists, check path, re-select file

Problem: "Permission denied" error
Solution: Close file in other programs, check permissions

Problem: Unicode/encoding errors
Solution: Using Python 3.6+, check terminal encoding

Problem: Tkinter not found
Solution: Install python3-tk package for your OS

================================================================================
WHAT IS A HASH?
---------------

Definition:
  A hash is a unique "fingerprint" for a file generated by a mathematical
  algorithm. Even the smallest change creates a completely different hash.

SHA256:
  - 256-bit cryptographic hash function
  - Output: 64 hexadecimal characters
  - Virtually impossible to find two files with same hash
  - Industry standard for file integrity

Example:
  File: "Hello World"
  Hash: a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e
  
  File: "Hello World!" (added one character)
  Hash: c0535e4be2b79ffd93291305436bf889314e4a3faec05ecffcbb7df31ad9e51a
  
  Notice: Completely different!

================================================================================
USE CASES:
----------

1. File Backup Verification
   - Verify backup matches original
   - Detect corruption in backups

2. Download Integrity
   - Verify downloaded files
   - Compare with publisher's hash

3. Tamper Detection
   - Monitor important files
   - Detect unauthorized changes

4. Security Auditing
   - Track file modifications
   - Maintain audit trail

5. Academic Projects
   - Demonstrate cryptography
   - Cybersecurity coursework

================================================================================
TIPS & BEST PRACTICES:
----------------------

DO:
  [x] Save/record original hashes
  [x] Recheck files after important operations
  [x] Use for sensitive documents
  [x] Verify downloads from internet
  [x] Check backup integrity

DON'T:
  [ ] Modify files while app is running
  [ ] Delete files after selecting them
  [ ] Ignore red warning indicators
  [ ] Rely only on file dates
  [ ] Forget to clear before new file

================================================================================
FOR ACADEMIC SUBMISSION:
------------------------

Include:
  1. All project files (hash_generator.py, app_gui.py)
  2. PROJECT_REPORT.md (your detailed report)
  3. README.md (project overview)
  4. Screenshots of running application
  5. This reference card

Highlight:
  - SHA256 implementation
  - GUI development
  - Error handling
  - Testing methodology
  - Real-world applications

Demo:
  1. Show file selection
  2. Display original hash
  3. Modify file
  4. Show detection of change
  5. Explain security implications

================================================================================
SAMPLE TEST:
------------

Create test file:
  echo "Test content" > test.txt

Run application:
  python app_gui.py

Select test.txt:
  - Original hash: [displayed]

Modify test.txt:
  echo " Modified!" >> test.txt

Recheck in app:
  - Result: RED (File Modified)

Restore test.txt:
  echo "Test content" > test.txt

Recheck again:
  - Result: GREEN (File is Safe)

================================================================================
ALGORITHM SUMMARY:
------------------

1. User selects file
2. App reads file in 4096-byte chunks
3. SHA256 hash computed incrementally
4. Original hash stored and displayed
5. User may modify file (external)
6. User clicks "Recheck File"
7. New hash computed same way
8. Hashes compared (string equality)
9. Result displayed:
   - Match → Green (Safe)
   - Different → Red (Modified)

================================================================================
CONTACT & SUPPORT:
------------------

For Issues:
  - Check documentation files
  - Run test_installation.py
  - Review error messages
  - Verify Python version

Documentation:
  - README.md (overview)
  - USAGE_GUIDE.md (detailed instructions)
  - PROJECT_REPORT.md (technical details)
  - PROJECT_SUMMARY.md (quick overview)

Project Info:
  - Developer: Harish
  - Language: Python 3.x
  - License: MIT
  - Purpose: Educational & Practical

================================================================================
VERSION INFORMATION:
--------------------

Project: File Integrity Checker (Hash Verifier)
Version: 1.0
Released: 2024-2025
Python: 3.6+ required
Tested: Windows, Linux, macOS
Status: Production Ready

================================================================================

Print this reference card for quick access!

                    Made with Python & Security in Mind
                              www.python.org

================================================================================
